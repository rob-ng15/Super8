ca65 V2.18 - N/A
Main file   : TERMINAL.s
Current file: TERMINAL.s

000000r 1               CHARACTER = $8000
000000r 1               FOREGROUND = $8400
000000r 1               BACKGROUND = $8800
000000r 1               ATTRIBUTE = $8C00
000000r 1               
000000r 1               terminal_queue_status = $c000
000000r 1               terminal_queue_in = $c001
000000r 1               terminal_cursor_x = $c002
000000r 1               terminal_cursor_y = $c003
000000r 1               terminal_cursor_on = $c004
000000r 1               terminal_foreground = $80
000000r 1               terminal_background = $81
000000r 1               terminal_attribute = $82
000000r 1               terminal_new_character = $83
000000r 1               
000000r 1               terminal_address_low = $84
000000r 1               terminal_address_high = terminal_address_low + 1
000000r 1               
000000r 1               scroll_address_low = $85
000000r 1               scroll_address_high = $86
000000r 1               scroll_address2_low = $87
000000r 1               scroll_address2_high = $88
000000r 1               
000000r 1               .segment "STARTUP"
000000r 1               
000000r 1               ENTRY:
000000r 1  78               sei                                                     ; switch off interrupts
000001r 1  A2 FF            ldx #$ff                                                ; initialise the stack pointer
000003r 1  9A               txs
000004r 1               
000004r 1  20 rr rr         jsr TERMINAL_INIT                                       ; call the terminal initialisation routines
000007r 1  80 0B            bra poll                                                ; jump to the polling loop
000009r 1               
000009r 1               
000009r 1               TERMINAL_POLL_QUEUE:                                        ; wait for a command in the fifo, subroutine so can be used to fetch follow on characters by escape routines
000009r 1  AD 00 C0         lda terminal_queue_status                               ; check FIFO availabale
00000Cr 1  F0 FB            beq TERMINAL_POLL_QUEUE
00000Er 1  AD 01 C0         lda terminal_queue_in                                   ; load character
000011r 1  85 83            sta terminal_new_character                              ; save character
000013r 1  60               rts
000014r 1               
000014r 1               
000014r 1               poll:                                                       ; main terminal loop
000014r 1  20 rr rr         jsr TERMINAL_POLL_QUEUE                                 ; wait for command in the FIFO
000017r 1               
000017r 1  89 80            bit #$80                                                ; check if the top bit is set, escape command
000019r 1  D0 0E            bne TERMINAL_ESCAPE
00001Br 1  C9 20            cmp #$20                                                ; check if a control character
00001Dr 1  90 05            bcc TERMINAL_CONTROL
00001Fr 1  20 rr rr         jsr TERMINAL_OUTPUT                                     ; ascii output character
000022r 1  80 F0            bra poll
000024r 1               
000024r 1               TERMINAL_CONTROL:                                           ; pass to the terminal control character handler
000024r 1  20 rr rr         jsr TERMINAL_CONTROL_CHARACTER
000027r 1  80 EB            bra poll
000029r 1               
000029r 1               
000029r 1               TERMINAL_ESCAPE:
000029r 1  20 rr rr         jsr TERMINAL_ESCAPE_CHARACTER                           ; pass to the terminal escape command handler
00002Cr 1  B0 02            bcs terminal_escape_symbol                              ; if carry set, output the symbol character
00002Er 1  80 E4            bra poll
000030r 1               terminal_escape_symbol:
000030r 1  20 rr rr         jsr TERMINAL_OUTPUT
000033r 1  80 DF            bra poll
000035r 1               
000035r 1               
000035r 1               TERMINAL_OUTPUT:                                            ; output the character ( stored in terminal_new_character )
000035r 1  64 85            stz terminal_address_high                               ; generate the address in the character memory
000037r 1  AD 03 C0         lda terminal_cursor_y                                   ;   terminal_cursor_y * 5 + terminal_cursor_x + $8000
00003Ar 1  85 84            sta terminal_address_low
00003Cr 1  20 rr rr         jsr X32_ADDR
00003Fr 1               
00003Fr 1  AD 02 C0         lda terminal_cursor_x                                   ;   add in the terminal_cursor_x ( 0 - 31 )
000042r 1  05 84            ora terminal_address_low
000044r 1  85 84            sta terminal_address_low
000046r 1  F7 85            smb7 terminal_address_high                              ;   add $8000 to the resulting address
000048r 1               
000048r 1  A5 83            lda terminal_new_character                              ; retrieve the character to display
00004Ar 1  92 84            sta (terminal_address_low)                              ; store character into calculated cell
00004Cr 1  20 rr rr         jsr ADDR_NEXT_PAGE                                      ; move to foreground
00004Fr 1  A5 80            lda terminal_foreground
000051r 1  92 84            sta (terminal_address_low)                              ; store foreground into calculated cell
000053r 1  20 rr rr         jsr ADDR_NEXT_PAGE                                      ; move to background
000056r 1  A5 81            lda terminal_background
000058r 1  92 84            sta (terminal_address_low)                              ; store background into calculated cell
00005Ar 1  20 rr rr         jsr ADDR_NEXT_PAGE                                      ; move to attribute
00005Dr 1  A5 82            lda terminal_attribute
00005Fr 1  92 84            sta (terminal_address_low)                              ; store attribute into calculated cell
000061r 1               
000061r 1  20 rr rr         jsr move_right                                          ; move the cursor
000064r 1  60               rts                                                     ; return back to poll loop
000065r 1               
000065r 1               
000065r 1               move_right:                                                 ; move the cursor right
000065r 1  AD 02 C0         lda terminal_cursor_x
000068r 1  C9 1F            cmp #31                                                 ; at end of line?
00006Ar 1  F0 04            beq end_line
00006Cr 1  EE 02 C0         inc terminal_cursor_x
00006Fr 1  60               rts
000070r 1               end_line:
000070r 1  9C 02 C0         stz terminal_cursor_x
000073r 1               
000073r 1               
000073r 1               move_down:                                                  ; move the cursor down
000073r 1  AD 03 C0         lda terminal_cursor_y
000076r 1  C9 17            cmp #23                                                 ; at last line?
000078r 1  F0 04            beq TERMINAL_SCROLL                                     ;   call scroll up
00007Ar 1  EE 03 C0         inc terminal_cursor_y
00007Dr 1  60               rts
00007Er 1               
00007Er 1               
00007Er 1               TERMINAL_SCROLL:                                            ; scroll the terminal up
00007Er 1  A2 00            ldx #0
000080r 1               sl:
000080r 1  BD 20 80         lda CHARACTER + 32,x
000083r 1  9D 00 80         sta CHARACTER,x
000086r 1  BD 20 81         lda CHARACTER + $100 + 32,x
000089r 1  9D 00 81         sta CHARACTER + $100,x
00008Cr 1  BD 20 82         lda CHARACTER + $200 + 32,x
00008Fr 1  9D 00 82         sta CHARACTER + $200,x
000092r 1               
000092r 1  BD 20 84         lda FOREGROUND + 32,x
000095r 1  9D 00 84         sta FOREGROUND,x
000098r 1  BD 20 85         lda FOREGROUND + $100 + 32,x
00009Br 1  9D 00 85         sta FOREGROUND + $100,x
00009Er 1  BD 20 86         lda FOREGROUND + $200 + 32,x
0000A1r 1  9D 00 86         sta FOREGROUND + $200,x
0000A4r 1               
0000A4r 1  BD 20 88         lda BACKGROUND + 32,x
0000A7r 1  9D 00 88         sta BACKGROUND,x
0000AAr 1  BD 20 89         lda BACKGROUND + $100 + 32,x
0000ADr 1  9D 00 89         sta BACKGROUND + $100,x
0000B0r 1  BD 20 8A         lda BACKGROUND + $200 + 32,x
0000B3r 1  9D 00 8A         sta BACKGROUND + $200,x
0000B6r 1               
0000B6r 1  BD 20 8C         lda ATTRIBUTE + 32,x
0000B9r 1  9D 00 8C         sta ATTRIBUTE,x
0000BCr 1  BD 20 8D         lda ATTRIBUTE + $100 + 32,x
0000BFr 1  9D 00 8D         sta ATTRIBUTE + $100,x
0000C2r 1  BD 20 8E         lda ATTRIBUTE + $200 + 32,x
0000C5r 1  9D 00 8E         sta ATTRIBUTE + $200,x
0000C8r 1               
0000C8r 1  E8               inx
0000C9r 1  D0 B5            bne sl
0000CBr 1               
0000CBr 1  A2 00            ldx #0                                                  ; set bottom row of screen to 0, foreground, background, attribute
0000CDr 1               ssl:
0000CDr 1  9E E0 82         stz CHARACTER+$2e0,x
0000D0r 1  A5 80            lda terminal_foreground
0000D2r 1  9D E0 86         sta FOREGROUND+$2e0,x
0000D5r 1  A5 81            lda terminal_background
0000D7r 1  9D E0 8A         sta BACKGROUND+$2e0,x
0000DAr 1  A5 82            lda terminal_attribute
0000DCr 1  9D E0 8E         sta ATTRIBUTE+$2e0,x
0000DFr 1               
0000DFr 1  E8               inx
0000E0r 1  E0 20            cpx #$20
0000E2r 1  D0 E9            bne ssl
0000E4r 1  60               rts
0000E5r 1               
0000E5r 1               
0000E5r 1               move_left:                                                  ; move the cursor left
0000E5r 1  AD 02 C0         lda terminal_cursor_x
0000E8r 1  F0 04            beq at_left                                             ; at left?
0000EAr 1  CE 02 C0         dec terminal_cursor_x
0000EDr 1  60               rts
0000EEr 1               at_left:
0000EEr 1  A9 1F            lda #$1f
0000F0r 1  8D 02 C0         sta terminal_cursor_x
0000F3r 1  AD 03 C0         lda terminal_cursor_y
0000F6r 1  F0 04            beq move_up                                             ; at top of screen
0000F8r 1  CE 03 C0         dec terminal_cursor_y
0000FBr 1  60               rts
0000FCr 1               
0000FCr 1               
0000FCr 1               move_up:                                                    ; move the cursor up
0000FCr 1  AD 03 C0         lda terminal_cursor_y                                   ; at the top of the screen
0000FFr 1  F0 04            beq TERMINAL_SCROLL_DOWN                                ;   call scroll down
000101r 1  CE 03 C0         dec terminal_cursor_y
000104r 1  60               rts
000105r 1               
000105r 1               
000105r 1               TERMINAL_SCROLL_DOWN:
000105r 1  A9 82            lda #$82                                                ; set address to 82ff and address2 to 82df ( last cell of character map, and cell above )
000107r 1  85 86            sta scroll_address_high
000109r 1  85 88            sta scroll_address2_high
00010Br 1  A9 FF            lda #$ff
00010Dr 1  85 85            sta scroll_address_low
00010Fr 1  A9 DF            lda #$df
000111r 1  85 87            sta scroll_address2_low
000113r 1               csdl:
000113r 1  B2 87            lda (scroll_address2_low)                               ; scroll down character map
000115r 1  92 85            sta (scroll_address_low)
000117r 1  20 rr rr         jsr DEC_ADDRS
00011Ar 1  A5 88            lda scroll_address2_high                                ; loop if not copied top line
00011Cr 1  C9 7F            cmp #$7f
00011Er 1  D0 F3            bne csdl
000120r 1               
000120r 1               ; scroll down foreground map
000120r 1  A9 86            lda #$86                                                ; set address to 86ff and address2 to 86df ( last cell of foreground map, and cell above )
000122r 1  85 86            sta scroll_address_high
000124r 1  85 88            sta scroll_address2_high
000126r 1  A9 FF            lda #$ff
000128r 1  85 85            sta scroll_address_low
00012Ar 1  A9 DF            lda #$df
00012Cr 1  85 87            sta scroll_address2_low
00012Er 1               fsdl:
00012Er 1  B2 87            lda (scroll_address2_low)                               ; scroll down character map
000130r 1  92 85            sta (scroll_address_low)
000132r 1  20 rr rr         jsr DEC_ADDRS
000135r 1  A5 88            lda scroll_address2_high                                ; loop if not copied top line
000137r 1  C9 83            cmp #$83
000139r 1  D0 F3            bne fsdl
00013Br 1               
00013Br 1               ; scroll down background map
00013Br 1  A9 8A            lda #$8a                                                ; set address to 8aff and address2 to 8adf ( last cell of foreground map, and cell above )
00013Dr 1  85 86            sta scroll_address_high
00013Fr 1  85 88            sta scroll_address2_high
000141r 1  A9 FF            lda #$ff
000143r 1  85 85            sta scroll_address_low
000145r 1  A9 DF            lda #$df
000147r 1  85 87            sta scroll_address2_low
000149r 1               dsdl:
000149r 1  B2 87            lda (scroll_address2_low)                               ; scroll down character map
00014Br 1  92 85            sta (scroll_address_low)
00014Dr 1  20 rr rr         jsr DEC_ADDRS
000150r 1  A5 88            lda scroll_address2_high                                ; loop if not copied top line
000152r 1  C9 87            cmp #$87
000154r 1  D0 F3            bne dsdl
000156r 1               
000156r 1               
000156r 1               ; scroll down attribute map
000156r 1  A9 8E            lda #$8e                                                ; set address to 8eff and address2 to 8edf ( last cell of foreground map, and cell above )
000158r 1  85 86            sta scroll_address_high
00015Ar 1  85 88            sta scroll_address2_high
00015Cr 1  A9 FF            lda #$ff
00015Er 1  85 85            sta scroll_address_low
000160r 1  A9 DF            lda #$df
000162r 1  85 87            sta scroll_address2_low
000164r 1               asdl:
000164r 1  B2 87            lda (scroll_address2_low)                               ; scroll down character map
000166r 1  92 85            sta (scroll_address_low)
000168r 1  20 rr rr         jsr DEC_ADDRS
00016Br 1  A5 88            lda scroll_address2_high                                ; loop if not copied top line
00016Dr 1  C9 8B            cmp #$8b
00016Fr 1  D0 F3            bne asdl
000171r 1               
000171r 1               
000171r 1  A2 00            ldx #$0
000173r 1               ssdl:
000173r 1  9E 00 80         stz CHARACTER,x                                         ; set top line to 0, foreground, background, attribute
000176r 1  A5 80            lda terminal_foreground
000178r 1  9D 00 84         sta FOREGROUND,x
00017Br 1  A5 81            lda terminal_background
00017Dr 1  9D 00 88         sta BACKGROUND,x
000180r 1  A5 82            lda terminal_attribute
000182r 1  9D 00 8C         sta ATTRIBUTE,x
000185r 1               
000185r 1  E8               inx
000186r 1  E0 20            cpx #$20
000188r 1  D0 E9            bne ssdl
00018Ar 1               
00018Ar 1  60               rts
00018Br 1               
00018Br 1               
00018Br 1               TERMINAL_CLEAR:
00018Br 1  A2 00            ldx #0
00018Dr 1               tcl:
00018Dr 1  9E 00 80         stz  CHARACTER,x
000190r 1  9E 00 81         stz  CHARACTER+$100,x
000193r 1  9E 00 82         stz  CHARACTER+$200,x
000196r 1               
000196r 1  A5 80            lda terminal_foreground
000198r 1  9D 00 84         sta FOREGROUND,x
00019Br 1  9D 00 85         sta FOREGROUND+$100,x
00019Er 1  9D 00 86         sta FOREGROUND+$200,x
0001A1r 1               
0001A1r 1  A5 81            lda terminal_background
0001A3r 1  9D 00 88         sta BACKGROUND,x
0001A6r 1  9D 00 89         sta BACKGROUND+$100,x
0001A9r 1  9D 00 8A         sta BACKGROUND+$200,x
0001ACr 1               
0001ACr 1  A5 82            lda terminal_attribute
0001AEr 1  9D 00 8C         sta ATTRIBUTE,x
0001B1r 1  9D 00 8D         sta ATTRIBUTE+$100,x
0001B4r 1  9D 00 8E         sta ATTRIBUTE+$200,x
0001B7r 1               
0001B7r 1  E8               inx
0001B8r 1  D0 D3            bne tcl
0001BAr 1  60               rts
0001BBr 1               
0001BBr 1               
0001BBr 1               TERMINAL_INIT:
0001BBr 1  9C 02 C0         stz terminal_cursor_x
0001BEr 1  A9 03            lda #$03
0001C0r 1  8D 03 C0         sta terminal_cursor_y
0001C3r 1  9C 04 C0         stz terminal_cursor_on
0001C6r 1  A9 02            lda #$02
0001C8r 1  85 80            sta terminal_foreground
0001CAr 1  A9 F6            lda #$f6
0001CCr 1  85 81            sta terminal_background
0001CEr 1  64 82            stz terminal_attribute
0001D0r 1               
0001D0r 1  20 rr rr         jsr TERMINAL_CLEAR
0001D3r 1  20 rr rr         jsr TERMINAL_BANNER
0001D6r 1               
0001D6r 1  A9 01            lda #$01
0001D8r 1  8D 04 C0         sta terminal_cursor_on
0001DBr 1  60               rts
0001DCr 1               
0001DCr 1               
0001DCr 1               TERMINAL_BANNER:
0001DCr 1  A2 00            ldx #$00
0001DEr 1               TB_LOOP:
0001DEr 1  BD rr rr         lda SB_TEXT,x
0001E1r 1  9D 00 80         sta CHARACTER,x
0001E4r 1  BD rr rr         lda SB_FORE,x
0001E7r 1  9D 00 84         sta FOREGROUND,x
0001EAr 1  BD rr rr         lda SB_BACK,x
0001EDr 1  9D 00 88         sta BACKGROUND,x
0001F0r 1  BD rr rr         lda SB_ATTR,x
0001F3r 1  9D 00 8C         sta ATTRIBUTE,x
0001F6r 1  E8               inx
0001F7r 1  E0 40            cpx #$40
0001F9r 1  D0 E3            bne TB_LOOP
0001FBr 1  60               rts
0001FCr 1               
0001FCr 1               
0001FCr 1               STARTUP_BANNER:
0001FCr 1               SB_TEXT:
0001FCr 1  53 53 55 55      .byte "SSUUPPEERR--88         [2x65c02]"
000200r 1  50 50 45 45  
000204r 1  52 52 2D 2D  
00021Cr 1  53 53 55 55      .byte "SSUUPPEERR--88                  "
000220r 1  50 50 45 45  
000224r 1  52 52 2D 2D  
00023Cr 1               SB_FORE:
00023Cr 1  C1 C1 E9 E9      .byte $c1,$c1,$e9,$e9,$f9,$f9,$38,$38,$06,$06,$4d,$4d,$87,$87,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000240r 1  F9 F9 38 38  
000244r 1  06 06 4D 4D  
00025Cr 1  C1 C1 E9 E9      .byte $c1,$c1,$e9,$e9,$f9,$f9,$38,$38,$06,$06,$4d,$4d,$87,$87,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000260r 1  F9 F9 38 38  
000264r 1  06 06 4D 4D  
00027Cr 1               
00027Cr 1               SB_BACK:
00027Cr 1  FF FF FF FF      .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
000280r 1  FF FF FF FF  
000284r 1  FF FF FF FF  
00029Cr 1  FF FF FF FF      .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
0002A0r 1  FF FF FF FF  
0002A4r 1  FF FF FF FF  
0002BCr 1               
0002BCr 1               SB_ATTR:
0002BCr 1  07 07 07 07      .byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
0002C0r 1  07 07 07 07  
0002C4r 1  07 07 07 07  
0002DCr 1  07 07 07 07      .byte $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
0002E0r 1  07 07 07 07  
0002E4r 1  07 07 07 07  
0002FCr 1               
0002FCr 1               
0002FCr 1               TERMINAL_CONTROL_CHARACTER:
0002FCr 1  0A               asl a
0002FDr 1  AA               tax
0002FEr 1  7C rr rr         jmp (CONTROL_CHARACTER_JUMP_TABLE,x)
000301r 1               
000301r 1               UNHANDLED_CONTROL_CHARACTER:
000301r 1  60               rts
000302r 1               CONTROL_CHARACTER_08:
000302r 1  AD 02 C0         lda terminal_cursor_x
000305r 1  F0 04            beq backspace_at_0
000307r 1  3A               dec a
000308r 1  8D 02 C0         sta terminal_cursor_x
00030Br 1               backspace_at_0:
00030Br 1  60               rts
00030Cr 1               CONTROL_CHARACTER_0D:
00030Cr 1  9C 02 C0         stz terminal_cursor_x
00030Fr 1  60               rts
000310r 1               
000310r 1               CONTROL_CHARACTER_JUMP_TABLE:
000310r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000312r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000314r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000316r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000318r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00031Ar 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00031Cr 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00031Er 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000320r 1  rr rr            .word   move_left
000322r 1  rr rr            .word   move_right
000324r 1  rr rr            .word   move_down
000326r 1  rr rr            .word   move_up
000328r 1  rr rr            .word   TERMINAL_CLEAR
00032Ar 1  rr rr            .word   CONTROL_CHARACTER_0D
00032Cr 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00032Er 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000330r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000332r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000334r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000336r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000338r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00033Ar 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00033Cr 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00033Er 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000340r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000342r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000344r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000346r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000348r 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00034Ar 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00034Cr 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
00034Er 1  rr rr            .word   UNHANDLED_CONTROL_CHARACTER
000350r 1               
000350r 1               
000350r 1               TERMINAL_ESCAPE_CHARACTER:
000350r 1  29 0F            and #$0f
000352r 1  0A               asl a
000353r 1  AA               tax
000354r 1  20 rr rr         jsr TERMINAL_POLL_QUEUE
000357r 1  7C rr rr         jmp (ESCAPE_CHARACTER_JUMP_TABLE,x)
00035Ar 1               
00035Ar 1               ESCAPE_CHARACTER_00:                                        ; set x cursor, snap to 0 - 31
00035Ar 1  29 1F            and #$1f
00035Cr 1  8D 02 C0         sta terminal_cursor_x
00035Fr 1  18               clc
000360r 1  60               rts
000361r 1               ESCAPE_CHARACTER_01:                                        ; set y cursor, snap to 0 - 23
000361r 1  C9 17            cmp #$17
000363r 1  90 04            bcc ES_01_SET
000365r 1  F0 02            beq ES_01_SET
000367r 1  A9 17            lda #$17
000369r 1               ES_01_SET:
000369r 1  8D 03 C0         sta terminal_cursor_y
00036Cr 1  18               clc
00036Dr 1  60               rts
00036Er 1               ESCAPE_CHARACTER_02:                                        ; set foreground colour
00036Er 1  85 80            sta terminal_foreground
000370r 1  18               clc
000371r 1  60               rts
000372r 1               ESCAPE_CHARACTER_03:                                        ; set background colour
000372r 1  85 81            sta terminal_background
000374r 1  18               clc
000375r 1  60               rts
000376r 1               ESCAPE_CHARACTER_04:                                        ; set attribute by bitmap
000376r 1  29 1F            and #$1f
000378r 1  05 82            ora terminal_attribute
00037Ar 1  85 82            sta terminal_attribute
00037Cr 1  18               clc
00037Dr 1  60               rts
00037Er 1               ESCAPE_CHARACTER_05:                                        ; clear attribute by bitmap ( #$1f will set to normal text )
00037Er 1  49 FF            eor #$ff
000380r 1  29 1F            and #$1f
000382r 1  25 82            and terminal_attribute
000384r 1  85 82            sta terminal_attribute
000386r 1  18               clc
000387r 1  60               rts
000388r 1               ESCAPE_CHARACTER_06:
000388r 1  18               clc
000389r 1  60               rts
00038Ar 1               ESCAPE_CHARACTER_07:
00038Ar 1  18               clc
00038Br 1  60               rts
00038Cr 1               ESCAPE_CHARACTER_08:
00038Cr 1  18               clc
00038Dr 1  60               rts
00038Er 1               ESCAPE_CHARACTER_09:
00038Er 1  18               clc
00038Fr 1  60               rts
000390r 1               ESCAPE_CHARACTER_0A:
000390r 1  18               clc
000391r 1  60               rts
000392r 1               ESCAPE_CHARACTER_0B:
000392r 1  18               clc
000393r 1  60               rts
000394r 1               ESCAPE_CHARACTER_0C:
000394r 1  18               clc
000395r 1  60               rts
000396r 1               ESCAPE_CHARACTER_0D:
000396r 1  18               clc
000397r 1  60               rts
000398r 1               ESCAPE_CHARACTER_0E:
000398r 1  18               clc
000399r 1  60               rts
00039Ar 1               ESCAPE_CHARACTER_0F:
00039Ar 1  38               sec                                                     ; set carry flag so as to output character symbol
00039Br 1  60               rts
00039Cr 1               
00039Cr 1               ESCAPE_CHARACTER_JUMP_TABLE:
00039Cr 1  rr rr            .word   ESCAPE_CHARACTER_00                             ; set x coordinate
00039Er 1  rr rr            .word   ESCAPE_CHARACTER_01                             ; set y coordinate
0003A0r 1  rr rr            .word   ESCAPE_CHARACTER_02                             ; set foreground
0003A2r 1  rr rr            .word   ESCAPE_CHARACTER_03                             ; set background
0003A4r 1  rr rr            .word   ESCAPE_CHARACTER_04                             ; set attribute ( by bits )
0003A6r 1  rr rr            .word   ESCAPE_CHARACTER_05                             ; clear attribute ( by bits )
0003A8r 1  rr rr            .word   ESCAPE_CHARACTER_06
0003AAr 1  rr rr            .word   ESCAPE_CHARACTER_07
0003ACr 1  rr rr            .word   ESCAPE_CHARACTER_08
0003AEr 1  rr rr            .word   ESCAPE_CHARACTER_09
0003B0r 1  rr rr            .word   ESCAPE_CHARACTER_0A
0003B2r 1  rr rr            .word   ESCAPE_CHARACTER_0B
0003B4r 1  rr rr            .word   ESCAPE_CHARACTER_0C
0003B6r 1  rr rr            .word   ESCAPE_CHARACTER_0D
0003B8r 1  rr rr            .word   ESCAPE_CHARACTER_0E
0003BAr 1  rr rr            .word   ESCAPE_CHARACTER_0F                             ; output next character, allows output of symbols
0003BCr 1               
0003BCr 1               
0003BCr 1               ; LIBRARY ROUTINES
0003BCr 1               
0003BCr 1               X32_ADDR:                                                   ; multiply the cursor address by 5
0003BCr 1  DA               phx
0003BDr 1  A2 05            ldx #5
0003BFr 1               X32_loop:
0003BFr 1  06 84            asl terminal_address_low                                ;   16 bit ASL
0003C1r 1  26 85            rol terminal_address_high
0003C3r 1  CA               dex
0003C4r 1  D0 F9            bne X32_loop                                            ;   loop 5 times, x2 x4 x8 x16 x32
0003C6r 1  FA               plx
0003C7r 1  60               rts
0003C8r 1               
0003C8r 1               ADDR_NEXT_PAGE:                                             ; add $400 to move from character -> foreground -> background -> attribute pages
0003C8r 1  08               php
0003C9r 1  48               pha
0003CAr 1  18               clc
0003CBr 1  A5 85            lda terminal_address_high
0003CDr 1  69 04            adc #$04
0003CFr 1  85 85            sta terminal_address_high
0003D1r 1  68               pla
0003D2r 1  28               plp
0003D3r 1  60               rts
0003D4r 1               
0003D4r 1               
0003D4r 1               DEC_ADDRS:                                                  ; decrement the scrolling addresses
0003D4r 1  48               pha
0003D5r 1  A5 85            lda scroll_address_low                                  ; decrement address
0003D7r 1  D0 02            bne lowdne0
0003D9r 1  C6 86            dec scroll_address_high
0003DBr 1               lowdne0:
0003DBr 1  C6 85            dec scroll_address_low
0003DDr 1               
0003DDr 1  A5 87            lda scroll_address2_low                                 ; decremnt address2
0003DFr 1  D0 02            bne low2dne0
0003E1r 1  C6 88            dec scroll_address2_high
0003E3r 1               low2dne0:
0003E3r 1  C6 87            dec scroll_address2_low
0003E5r 1  68               pla
0003E6r 1  60               rts
0003E7r 1               
0003E7r 1               
0003E7r 1               NMI:
0003E7r 1  40               rti
0003E8r 1               
0003E8r 1               IRQ:
0003E8r 1  40               rti
0003E9r 1               
0003E9r 1               RETJMP:
0003E9r 1  60               rts
0003EAr 1               
0003EAr 1               .segment "VECTORS"                                              ; Switch to 6502 CPU VECTORS @ FFFA
000000r 1  rr rr                .word   NMI
000002r 1  rr rr                .word   ENTRY
000004r 1  rr rr                .word   IRQ
000004r 1               
